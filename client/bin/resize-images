#!/usr/bin/perl -w

use strict;

my (%landscapeGeometries, %portraitGeometries, %areas, @fileList,
    $baseDir, $resizeDir, $quality, $tempFile, $gzTemp, %landscapeSizes,
    %portraitSizes);

%landscapeGeometries =
    ("thumbnail" => "192x128",
     "small" => "384x256",
     "medium" => "768x512",
     "large" => "1536x1024",
     "huge" => "3072x2048");
%portraitGeometries =
    ("thumbnail" => "128x192",
     "small" => "256x384",
     "medium" => "512x768",
     "large" => "1024x1536",
     "huge" => "2048x3072");

%landscapeSizes =
    ("thumbnail" => "x128",
     "small" => "x256",
     "medium" => "x512",
     "large" => "x1024",
     "huge" => "x2048");
%portraitSizes =
    ("thumbnail" => "128x",
     "small" => "256x",
     "medium" => "512x",
     "large" => "1024x",
     "huge" => "2048x");

%areas =
    ("thumbnail" => (128 * 192),
     "small" => (256 * 384),
     "medium" => (512 * 768),
     "large" => (1024 * 1536),
     "huge" => (2048 * 3072));

if ( ! -d $ARGV[0] ) {
    die "First argument must be a directory of images.";
}

$baseDir = $ARGV[0];
# for now, support either jpgs or tifs, not both
@fileList = `ls $baseDir/|grep '.jpg\$'|xargs --no-run-if-empty -n 1 basename`;
if (@fileList == 0) {
    @fileList = `ls $baseDir/|egrep '.tiff?(.gz)?\$'|xargs --no-run-if-empty -n 1 basename`;
}

if (@ARGV > 1) {
    $resizeDir = "$ARGV[1]";

} else {
    $resizeDir = "$baseDir/resized-images";
}
if ( ! -d $resizeDir ) {
    mkdir $resizeDir;
}
$quality = 80;
$tempFile = "/tmp/resize-images-temp.tif";
$gzTemp = "/tmp/resize-images-gztemp.tif";

foreach my $file (@fileList) {
    my ($width, $height, $area, $geometry, %geometries, $newFile, $srcFile,
        $cmd, $prefix, $number, %sizes);
    chomp $file;

    ($newFile = $file) =~ /^(\D*)\d*?-?(\d+)\.(.+?)(.gz)?$/; # $1$2-thumbnail.$3/;
    $prefix = $1;
    $number = $2;
#    $suffix = $3;

    # first autorotate the image
    if ( $file =~ /\.jpe?g$/ ) {
        my ($origFileRotated, $origFileHuge);
        $origFileRotated = "$resizeDir/$prefix$number-orig.jpg";
        $origFileHuge = "$resizeDir/$prefix$number-huge.jpg";
	if ( !-f $origFileRotated && !-f $origFileHuge) {
            system "cp $file $origFileRotated";
            $srcFile = "$origFileRotated\[0\]";
            print "Rotating image $origFileRotated\n";
            system "exiftran -ai $origFileRotated";
            $file = $origFileRotated;
	} else {
	    system "echo skipping rotation of existing file: $origFileRotated";
            next;
	}
    }

    # only get the first line for tifs with multiple images
    # this probably won't work all the time
    $geometry = `identify $baseDir/$file | head -1 |awk '{print \$3;}'`;
    $geometry =~ /^(\d+)x(\d+)$/ || die "identify didn't give a geometry for $baseDir/$file.  (geometry was $geometry)";
    $width = $1;
    $height = $2;
    $area = $width * $height;
    if ( $width > $height ) {
        %geometries = %landscapeGeometries;
        %sizes = %landscapeSizes;
    } else {
        %geometries = %portraitGeometries;
        %sizes = %portraitSizes;
    }
    
    #crop tiffs first
    my $croppedFile;
    if ( $file =~ /\.gz$/ ) {
        system "gzip -dc $baseDir/$file > $gzTemp";
        $croppedFile = $gzTemp;
    } else {
        $croppedFile = "$baseDir/$file";
    }

    if ( $file =~ /\.tiff?(\.gz)?$/ ) {
        $srcFile = $tempFile;
# 10000 is too big; 6500 seems to be minimum that'll work on a difficult image
        $cmd = "convert -background black -fuzz 6500 -crop 0x0 -normalize "
            . "$croppedFile\[0\] $srcFile";
        system "echo Cropping TIFF file.";
        system "echo $cmd";
        system "$cmd";
    }

    foreach my $size (keys %geometries) {
        $newFile = "$prefix$number-$size.jpg";
	if ( -f "$resizeDir/$newFile" ) {
	    system "echo Skipping existing file: $resizeDir/$newFile";
	    next;
	}

# this stuff is too big
#        if ( $area < $areas{$size} ) {
#            # we should only get here for jpegs
#            $cmd = "cp $baseDir/$file $resizeDir/$newFile";
#        } else {
            # always use the first image if there are multiple ([0])
            $cmd = "convert -size $geometries{$size} -quality $quality "
                . "-resize \'$sizes{$size}\>\' $srcFile "
                . "$resizeDir/$newFile";
#        }
        system "echo $cmd";
        system "$cmd";
    }
}

if ($fileList[0] =~ /\.jpe?g$/) {
    print "Rotating images from exif data...\n";
    system "chmod 644 $resizeDir/*.jpg";
# exiftran is broken
#    system "exiftran -ai $resizeDir/*.jpg";

}

if (-f $tempFile) {
    system "rm $tempFile";
}
if ( -f $gzTemp ) {
    system "rm $gzTemp";
}

if ( $baseDir =~ /^\/cdrom/ ) {
    system "echo All done.  Ejecting CD...";
    system "eject";
}
