/context/action/select-method/selection-parameters

/images/display/by-id/562
/images/albums/by-name/bug-love/12
/images/rolls/by-id/46/36


pros:
- easy parsing
- clear URLS
- no extension (can change output format?)
 - specify type by content-type rather than extension
 - is there a header or something for filename?

cons:
- bad filenames
 - we could have a download link which gets the image by filename and
   id, placing the filename at the end to save properly
 - or we could use the name as the end of the URL
- no extension (although we could just add that)


- selecting by id is not a very human friendly method of URL
  specification
 - it would be better (in terms of URL) to specify by name
 - but that means that you have to specify a unique name for every
  photo, maybe categorized in a hierarchy...that's tricky
 - uniqueness within an album doesn't really help, because all images
  are (and should be, i think) fundamentally in a flat organization


variations:

alternate parameter and value
/images/display/id/562
/images/albums/name/bug-love/position/12
/images/rolls/id/46/position/36

this makes it a little bit more user-friendly


user?

/images/album/oliver/germany-2001/13
/images/album/oliver/burning-man-2003/22

/images/album : controller
              /oliver : user
                     /germany-2001 : album name
                                  /22 : frame number



select from users where user.name = 'oliver';
select from images, image_groups where images.owner_id

we can always have a different action name to select by parameter


argh
now we have two different actions:
if there's an ID at the end, show the individual frame
if there's not, show the album contents

there's probably a different view for standalone image display
vs. imageframe display, so maybe that's a good thing
controller just has to choose between two views

how to deal with album pagination?
query-string?

force trailing / on album name, user name, but not on image?

/images/album/oliver/?start=11
/images/album/oliver/germany-2001/
/images/album/oliver/germany-2001/?start=51
/images/album/oliver/germany-2001/1093


implementation:
use a command controller - the command object wraps the user, album
name, frame number combo

then just have to implement a way to create that object


user bookmarks album frame, then album changes - frame points to a
different image

/images/albums/oliver/germany-2001/bach-haus-1
/images/albums/oliver/germany-2001/wartburg-3

could make image name unique within its roll
then images have to be specified by roll and name
then we have 2 image groups in one url

/images/albums/oliver/germany-2001/germany-3/wartburg-3

blech.

could give an additional name to the ImageFrame
blech. - too much data entry
could default from the image name, then ask if there are conflicts

could specify by image id

/images/albums/oliver/germany-2001/100320
/images/albums/oliver/germany-2001/2003
/images/albums/oliver/germany-2001/1
/images/albums/oliver/germany-2001/30204
/images/albums/oliver/germany-2001/by-id/30204
/images/albums/oliver/germany-2001/image-id/30204


URL should be specified by Image, not ImageManifestation
that way, different MFs can be substituted according to user prefs

what if the album wants to specify a particular size? URL param?
that could be set in the ImageFrame if needed
should the URL specify an ImageFrame or an Image?
perhaps an ImageFrame tied to an Image
associate/identify ImageFrames with/by Image rather than position


we need an action

/display/albums/oliver/germany-2001/10032
/edit/albums/oliver/germany-2001/10032
/add/albums
/albums/display/oliver/germany-2001/10032
/albums/edit/oliver/germany-2001/10032
/albums/add
/albums/oliver/germany-2001/10032/edit
/albums/oliver/germany-2001/add
/edit-album?album_id=2423
/add-frame?album_id=2423&image_id=10033


rationale:
object-centric URL or action-centric?
/albums/edit
OR
/edit/albums

/albums/oliver/germany-2001/edit
/albums/oliver/germany-2001/add-frame
/albums/oliver/germany-2001/?action=add-frame


do we allow edit/add operations on any object, just using the rest of
the url as a selector?

we could use a mapping handler thing to map the first part of the url,
then have that method call another common method to decide what to do
with the object


define common operations:
edit
add new
delete
display

is it feasible to abstract these operations to allow a generic
handler?
what does each need to do?
need a controller and view for each, really

one controller (part) selects object
another does operation specific actions, selects view


doing things this way means that an object should always be pointed to
by the same beginning path - that's sort of simple


first url part is object type
/album
/image
/imf
/roll

second url part is identifier, can be multiple
/image/by-id/22
/album/oliver/germany-2001

plurality?
album or albums?
/album/oliver/ points to many albums
/albums/oliver/germany-2001 points to only 1 album

i think plural is better

/images/by-id/2
/albums/oliver/germany-2001

plural makes sense when restricted by more args

with type first, can dispatch to a type-specific controller
controller can then process object specifier args, then pass operation
to an operation handler method
should that be defined in the controller?

this is UI, so it doesn't really belong in the model

perhaps we can isolate common behavior within the V/C, though

album-edit.jsp
album-add.jsp
album-display.jsp -- does this handle display of users, albums, and
frames?

for a given object type, we may have to actually handle multiple types
(that should only be for display, though)

/users/oliver
/users/oliver/albums/germany-2001
/users/oliver/rolls/germany-6
/users/oliver/images/by-id/2

this defines owner and then object type

comparison to filesystem:

/home/oliver/albums/de/munich/burgard.jpg


is everything owned by a user?
do we always want to expose the user?
what if we just want to select by object id?

/users/oliver/albums/by-id/6  <-- this is redundant
/albums/by-id/6


do we always have a unique textual selector by user and object type?
we could, i suppose - tough for images
user/roll/image

i'm not crazy about managing uniqueness among image names, though i
guess it's analogous to files in a directory
images can be in multiple image groups
maybe images should only be in one roll; that would make this easier

user-centric makes sense from a nav standpoint - go to a user's
profile, then nav to albums, images, etc.

the urls don't really have to match the nav sequence though
better to make them sensible in terms of hierarchy

user's home can just point to that user's part of the album hierarchy
i think that makes sense
/users/oliver -> /albums/oliver
/users/oliver -> /rolls/oliver

just pointing to a different part of the system
it would be onerous to support arbitrary types like that

developers should be able to add new top-level types
/monkeys/oliver/frump/bag

OTOH, user-centric makes it easy to present a list of things that user
owns
(no it doesn't...it's still just select statements...the urls don't
matter as long as you have a way to map from object type to handler
URL)

/users/oliver/ shows:
/users/oliver/albums
/users/oliver/rolls
/users/oliver/monkeys

how do we get a list of objects owned by oliver?
it would be easier with a common object superclass that has an owner

select distinct type from tm_objects where owner = 'oliver'
album
roll
monkey

(we could always do both, or switch at some point
as long as the part after the object type stays the same, we could
just chain the controllers, oder?
I don't see any explicit support in spring for chaining controllers
it's not necessarily the controller I want to chain, though
it's a handler mapping, which could select the object and pass it to
the right controller
only one controller is needed for the actual action, right?

could this work like a command controller, where you just specify what
arg positions specify what?
(why not?)


generic way of mapping from a user's object to the handler/url for it?

getUrlForObjectTypeAndUser(album.class, user);


permissions?
if on object itself, the URL doesn't matter
if on action, **/edit could restrict, right?
as long as we make sure that there isn't anything else that ends that
way

/albums/oliver/germany-first-edit
/albums/oliver/edit/

maybe we need to restrict album names so that they can't be
add/edit/remove/display

for performative actions, better to have query params :/
?action=remove
/remove/?for_real=true
I guess we could protect with a form
worry about that later :)

default action is display, with a keyword, it's that keyword

/images/by-id/6
/images/by-id/6/edit
/images/by-id/6?action=edit
/images/by-id/6?action=remove
